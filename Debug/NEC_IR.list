
NEC_IR.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000288  08000194  08000194  00001194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  0800041c  08000424  00001424  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  0800041c  0800041c  00001424  2**0
                  CONTENTS
  4 .ARM          00000000  0800041c  0800041c  00001424  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800041c  08000424  00001424  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800041c  0800041c  0000141c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08000420  08000420  00001420  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000000  20000000  20000000  00001424  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  08000424  00002000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  08000424  0000201c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00001424  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000071f  00000000  00000000  00001454  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000215  00000000  00000000  00001b73  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000078  00000000  00000000  00001d88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000004d  00000000  00000000  00001e00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000001a0  00000000  00000000  00001e4d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00000b08  00000000  00000000  00001fed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0004f7c4  00000000  00000000  00002af5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000522b9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000000c4  00000000  00000000  000522fc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005a  00000000  00000000  000523c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	@ (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000000 	.word	0x20000000
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08000404 	.word	0x08000404

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	@ (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	@ (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	@ (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000004 	.word	0x20000004
 80001d0:	08000404 	.word	0x08000404

080001d4 <PWM_Init>:
#include "stm32f4xx.h"

void PWM_Init(void) {
 80001d4:	b480      	push	{r7}
 80001d6:	af00      	add	r7, sp, #0
    // Enable clock for GPIOA and TIM1
    RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN; // Enable GPIOA clock
 80001d8:	4b2f      	ldr	r3, [pc, #188]	@ (8000298 <PWM_Init+0xc4>)
 80001da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80001dc:	4a2e      	ldr	r2, [pc, #184]	@ (8000298 <PWM_Init+0xc4>)
 80001de:	f043 0301 	orr.w	r3, r3, #1
 80001e2:	6313      	str	r3, [r2, #48]	@ 0x30
    RCC->APB2ENR |= RCC_APB2ENR_TIM1EN;  // Enable TIM1 clock
 80001e4:	4b2c      	ldr	r3, [pc, #176]	@ (8000298 <PWM_Init+0xc4>)
 80001e6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80001e8:	4a2b      	ldr	r2, [pc, #172]	@ (8000298 <PWM_Init+0xc4>)
 80001ea:	f043 0301 	orr.w	r3, r3, #1
 80001ee:	6453      	str	r3, [r2, #68]	@ 0x44

    // Configure PA8 as Alternate Function (AF1 - TIM1 CH1)
    GPIOA->MODER &= ~GPIO_MODER_MODER8;      // Clear MODER bits for PA8
 80001f0:	4b2a      	ldr	r3, [pc, #168]	@ (800029c <PWM_Init+0xc8>)
 80001f2:	681b      	ldr	r3, [r3, #0]
 80001f4:	4a29      	ldr	r2, [pc, #164]	@ (800029c <PWM_Init+0xc8>)
 80001f6:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 80001fa:	6013      	str	r3, [r2, #0]
    GPIOA->MODER |= GPIO_MODER_MODER8_1;    // Set PA8 to Alternate Function mode
 80001fc:	4b27      	ldr	r3, [pc, #156]	@ (800029c <PWM_Init+0xc8>)
 80001fe:	681b      	ldr	r3, [r3, #0]
 8000200:	4a26      	ldr	r2, [pc, #152]	@ (800029c <PWM_Init+0xc8>)
 8000202:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000206:	6013      	str	r3, [r2, #0]
    GPIOA->AFR[1] &= ~GPIO_AFRH_AFRH0;      // Clear AFR bits for PA8
 8000208:	4b24      	ldr	r3, [pc, #144]	@ (800029c <PWM_Init+0xc8>)
 800020a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800020c:	4a23      	ldr	r2, [pc, #140]	@ (800029c <PWM_Init+0xc8>)
 800020e:	f023 030f 	bic.w	r3, r3, #15
 8000212:	6253      	str	r3, [r2, #36]	@ 0x24
    GPIOA->AFR[1] |= GPIO_AFRH_AFRH0_0;     // Set AF1 for TIM1 on PA8
 8000214:	4b21      	ldr	r3, [pc, #132]	@ (800029c <PWM_Init+0xc8>)
 8000216:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000218:	4a20      	ldr	r2, [pc, #128]	@ (800029c <PWM_Init+0xc8>)
 800021a:	f043 0301 	orr.w	r3, r3, #1
 800021e:	6253      	str	r3, [r2, #36]	@ 0x24

    // Configure TIM1 for PWM
    TIM1->PSC = 0;                          // Prescaler value (no prescaling, f_timer = 76 MHz)
 8000220:	4b1f      	ldr	r3, [pc, #124]	@ (80002a0 <PWM_Init+0xcc>)
 8000222:	2200      	movs	r2, #0
 8000224:	629a      	str	r2, [r3, #40]	@ 0x28
    TIM1->ARR = (76000000 / 38000) - 1;     // Set Auto-Reload Register for 38 kHz (1999 for 76 MHz clock)
 8000226:	4b1e      	ldr	r3, [pc, #120]	@ (80002a0 <PWM_Init+0xcc>)
 8000228:	f240 72cf 	movw	r2, #1999	@ 0x7cf
 800022c:	62da      	str	r2, [r3, #44]	@ 0x2c
    TIM1->CCR1 = TIM1->ARR / 2;             // Set Compare Register 1 for 50% duty cycle (ARR/2)
 800022e:	4b1c      	ldr	r3, [pc, #112]	@ (80002a0 <PWM_Init+0xcc>)
 8000230:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000232:	4a1b      	ldr	r2, [pc, #108]	@ (80002a0 <PWM_Init+0xcc>)
 8000234:	085b      	lsrs	r3, r3, #1
 8000236:	6353      	str	r3, [r2, #52]	@ 0x34

    TIM1->CCMR1 &= ~TIM_CCMR1_OC1M;         // Clear Output Compare mode bits
 8000238:	4b19      	ldr	r3, [pc, #100]	@ (80002a0 <PWM_Init+0xcc>)
 800023a:	699b      	ldr	r3, [r3, #24]
 800023c:	4a18      	ldr	r2, [pc, #96]	@ (80002a0 <PWM_Init+0xcc>)
 800023e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8000242:	6193      	str	r3, [r2, #24]
    TIM1->CCMR1 |= TIM_CCMR1_OC1M_1 | TIM_CCMR1_OC1M_2; // Set PWM mode 1 (110)
 8000244:	4b16      	ldr	r3, [pc, #88]	@ (80002a0 <PWM_Init+0xcc>)
 8000246:	699b      	ldr	r3, [r3, #24]
 8000248:	4a15      	ldr	r2, [pc, #84]	@ (80002a0 <PWM_Init+0xcc>)
 800024a:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800024e:	6193      	str	r3, [r2, #24]
    TIM1->CCMR1 |= TIM_CCMR1_OC1PE;         // Enable Preload for CCR1
 8000250:	4b13      	ldr	r3, [pc, #76]	@ (80002a0 <PWM_Init+0xcc>)
 8000252:	699b      	ldr	r3, [r3, #24]
 8000254:	4a12      	ldr	r2, [pc, #72]	@ (80002a0 <PWM_Init+0xcc>)
 8000256:	f043 0308 	orr.w	r3, r3, #8
 800025a:	6193      	str	r3, [r2, #24]

    TIM1->CCER |= TIM_CCER_CC1E;            // Enable Capture/Compare 1 output
 800025c:	4b10      	ldr	r3, [pc, #64]	@ (80002a0 <PWM_Init+0xcc>)
 800025e:	6a1b      	ldr	r3, [r3, #32]
 8000260:	4a0f      	ldr	r2, [pc, #60]	@ (80002a0 <PWM_Init+0xcc>)
 8000262:	f043 0301 	orr.w	r3, r3, #1
 8000266:	6213      	str	r3, [r2, #32]
    TIM1->BDTR |= TIM_BDTR_MOE;             // Enable Main Output (for TIM1 specific)
 8000268:	4b0d      	ldr	r3, [pc, #52]	@ (80002a0 <PWM_Init+0xcc>)
 800026a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800026c:	4a0c      	ldr	r2, [pc, #48]	@ (80002a0 <PWM_Init+0xcc>)
 800026e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000272:	6453      	str	r3, [r2, #68]	@ 0x44
    TIM1->CR1 |= TIM_CR1_ARPE;              // Enable Auto-Reload Preload
 8000274:	4b0a      	ldr	r3, [pc, #40]	@ (80002a0 <PWM_Init+0xcc>)
 8000276:	681b      	ldr	r3, [r3, #0]
 8000278:	4a09      	ldr	r2, [pc, #36]	@ (80002a0 <PWM_Init+0xcc>)
 800027a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800027e:	6013      	str	r3, [r2, #0]
    TIM1->CR1 |= TIM_CR1_CEN;               // Enable TIM1 counter
 8000280:	4b07      	ldr	r3, [pc, #28]	@ (80002a0 <PWM_Init+0xcc>)
 8000282:	681b      	ldr	r3, [r3, #0]
 8000284:	4a06      	ldr	r2, [pc, #24]	@ (80002a0 <PWM_Init+0xcc>)
 8000286:	f043 0301 	orr.w	r3, r3, #1
 800028a:	6013      	str	r3, [r2, #0]
}
 800028c:	bf00      	nop
 800028e:	46bd      	mov	sp, r7
 8000290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000294:	4770      	bx	lr
 8000296:	bf00      	nop
 8000298:	40023800 	.word	0x40023800
 800029c:	40020000 	.word	0x40020000
 80002a0:	40010000 	.word	0x40010000

080002a4 <main>:

int main(void)
{
 80002a4:	b580      	push	{r7, lr}
 80002a6:	af00      	add	r7, sp, #0
	PWM_Init();
 80002a8:	f7ff ff94 	bl	80001d4 <PWM_Init>

    while (1)
 80002ac:	bf00      	nop
 80002ae:	e7fd      	b.n	80002ac <main+0x8>

080002b0 <Clock_Config>:
#include "stm32f4xx.h"

uint32_t SystemCoreClock = 76000000;

static void Clock_Config(void)
{
 80002b0:	b480      	push	{r7}
 80002b2:	af00      	add	r7, sp, #0
	// Configures flash latency.
	MODIFY_REG(FLASH->ACR,
 80002b4:	4b25      	ldr	r3, [pc, #148]	@ (800034c <Clock_Config+0x9c>)
 80002b6:	681b      	ldr	r3, [r3, #0]
 80002b8:	f023 0307 	bic.w	r3, r3, #7
 80002bc:	4a23      	ldr	r2, [pc, #140]	@ (800034c <Clock_Config+0x9c>)
 80002be:	f043 0302 	orr.w	r3, r3, #2
 80002c2:	6013      	str	r3, [r2, #0]
		FLASH_ACR_LATENCY,
		_VAL2FLD(FLASH_ACR_LATENCY, FLASH_ACR_LATENCY_2WS) //FLASH_ACR_LATENCY_2WS << FLASH_ACR_LATENCY_Pos
	);

	// Enables HSE.
	SET_BIT(RCC->CR, RCC_CR_HSEON);
 80002c4:	4b22      	ldr	r3, [pc, #136]	@ (8000350 <Clock_Config+0xa0>)
 80002c6:	681b      	ldr	r3, [r3, #0]
 80002c8:	4a21      	ldr	r2, [pc, #132]	@ (8000350 <Clock_Config+0xa0>)
 80002ca:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80002ce:	6013      	str	r3, [r2, #0]

	// Waits until HSE is stable.
	while (!READ_BIT(RCC->CR, RCC_CR_HSERDY));
 80002d0:	bf00      	nop
 80002d2:	4b1f      	ldr	r3, [pc, #124]	@ (8000350 <Clock_Config+0xa0>)
 80002d4:	681b      	ldr	r3, [r3, #0]
 80002d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80002da:	2b00      	cmp	r3, #0
 80002dc:	d0f9      	beq.n	80002d2 <Clock_Config+0x22>

	// Configures PLL: source = HSE, PLLCLK = 72MHz.
	MODIFY_REG(RCC->PLLCFGR,
 80002de:	4b1c      	ldr	r3, [pc, #112]	@ (8000350 <Clock_Config+0xa0>)
 80002e0:	685b      	ldr	r3, [r3, #4]
 80002e2:	4a1c      	ldr	r2, [pc, #112]	@ (8000354 <Clock_Config+0xa4>)
 80002e4:	401a      	ands	r2, r3
 80002e6:	491a      	ldr	r1, [pc, #104]	@ (8000350 <Clock_Config+0xa0>)
 80002e8:	4b1b      	ldr	r3, [pc, #108]	@ (8000358 <Clock_Config+0xa8>)
 80002ea:	4313      	orrs	r3, r2
 80002ec:	604b      	str	r3, [r1, #4]
		RCC_PLLCFGR_PLLM | RCC_PLLCFGR_PLLN | RCC_PLLCFGR_PLLQ | RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLP,
		_VAL2FLD(RCC_PLLCFGR_PLLM, 4) | _VAL2FLD(RCC_PLLCFGR_PLLN, 76) | _VAL2FLD(RCC_PLLCFGR_PLLQ, 3) | RCC_PLLCFGR_PLLSRC_HSE
	);

	// Enables PLL module.
	SET_BIT(RCC->CR, RCC_CR_PLLON);
 80002ee:	4b18      	ldr	r3, [pc, #96]	@ (8000350 <Clock_Config+0xa0>)
 80002f0:	681b      	ldr	r3, [r3, #0]
 80002f2:	4a17      	ldr	r2, [pc, #92]	@ (8000350 <Clock_Config+0xa0>)
 80002f4:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80002f8:	6013      	str	r3, [r2, #0]

	// Waits until PLL is stable.
	while (!READ_BIT(RCC->CR, RCC_CR_PLLRDY));
 80002fa:	bf00      	nop
 80002fc:	4b14      	ldr	r3, [pc, #80]	@ (8000350 <Clock_Config+0xa0>)
 80002fe:	681b      	ldr	r3, [r3, #0]
 8000300:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000304:	2b00      	cmp	r3, #0
 8000306:	d0f9      	beq.n	80002fc <Clock_Config+0x4c>

	// Switches system clock to PLL.
	MODIFY_REG(RCC->CFGR,
 8000308:	4b11      	ldr	r3, [pc, #68]	@ (8000350 <Clock_Config+0xa0>)
 800030a:	689b      	ldr	r3, [r3, #8]
 800030c:	f023 0303 	bic.w	r3, r3, #3
 8000310:	4a0f      	ldr	r2, [pc, #60]	@ (8000350 <Clock_Config+0xa0>)
 8000312:	f043 0302 	orr.w	r3, r3, #2
 8000316:	6093      	str	r3, [r2, #8]
		RCC_CFGR_SW,
		_VAL2FLD(RCC_CFGR_SW, RCC_CFGR_SW_PLL)
	);

	// Configures PPRE1 = 2, (PPRE2 = 1, HPRE = 1 by default).
	MODIFY_REG(RCC->CFGR,
 8000318:	4b0d      	ldr	r3, [pc, #52]	@ (8000350 <Clock_Config+0xa0>)
 800031a:	689b      	ldr	r3, [r3, #8]
 800031c:	f423 53e0 	bic.w	r3, r3, #7168	@ 0x1c00
 8000320:	4a0b      	ldr	r2, [pc, #44]	@ (8000350 <Clock_Config+0xa0>)
 8000322:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000326:	6093      	str	r3, [r2, #8]
		RCC_CFGR_PPRE1,
		_VAL2FLD(RCC_CFGR_PPRE1, 4)
	);

	// Waits until PLL is used.
	while(READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RCC_CFGR_SWS_PLL);
 8000328:	bf00      	nop
 800032a:	4b09      	ldr	r3, [pc, #36]	@ (8000350 <Clock_Config+0xa0>)
 800032c:	689b      	ldr	r3, [r3, #8]
 800032e:	f003 030c 	and.w	r3, r3, #12
 8000332:	2b08      	cmp	r3, #8
 8000334:	d1f9      	bne.n	800032a <Clock_Config+0x7a>

	// Disables HSI.
	CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8000336:	4b06      	ldr	r3, [pc, #24]	@ (8000350 <Clock_Config+0xa0>)
 8000338:	681b      	ldr	r3, [r3, #0]
 800033a:	4a05      	ldr	r2, [pc, #20]	@ (8000350 <Clock_Config+0xa0>)
 800033c:	f023 0301 	bic.w	r3, r3, #1
 8000340:	6013      	str	r3, [r2, #0]

}
 8000342:	bf00      	nop
 8000344:	46bd      	mov	sp, r7
 8000346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800034a:	4770      	bx	lr
 800034c:	40023c00 	.word	0x40023c00
 8000350:	40023800 	.word	0x40023800
 8000354:	f0bc8000 	.word	0xf0bc8000
 8000358:	03401304 	.word	0x03401304

0800035c <SystemInit>:

void SystemInit(void)
{
 800035c:	b580      	push	{r7, lr}
 800035e:	af00      	add	r7, sp, #0
	Clock_Config();
 8000360:	f7ff ffa6 	bl	80002b0 <Clock_Config>
}
 8000364:	bf00      	nop
 8000366:	bd80      	pop	{r7, pc}

08000368 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000368:	480d      	ldr	r0, [pc, #52]	@ (80003a0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800036a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 800036c:	f7ff fff6 	bl	800035c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000370:	480c      	ldr	r0, [pc, #48]	@ (80003a4 <LoopForever+0x6>)
  ldr r1, =_edata
 8000372:	490d      	ldr	r1, [pc, #52]	@ (80003a8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000374:	4a0d      	ldr	r2, [pc, #52]	@ (80003ac <LoopForever+0xe>)
  movs r3, #0
 8000376:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000378:	e002      	b.n	8000380 <LoopCopyDataInit>

0800037a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800037a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800037c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800037e:	3304      	adds	r3, #4

08000380 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000380:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000382:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000384:	d3f9      	bcc.n	800037a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000386:	4a0a      	ldr	r2, [pc, #40]	@ (80003b0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000388:	4c0a      	ldr	r4, [pc, #40]	@ (80003b4 <LoopForever+0x16>)
  movs r3, #0
 800038a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800038c:	e001      	b.n	8000392 <LoopFillZerobss>

0800038e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800038e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000390:	3204      	adds	r2, #4

08000392 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000392:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000394:	d3fb      	bcc.n	800038e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000396:	f000 f811 	bl	80003bc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800039a:	f7ff ff83 	bl	80002a4 <main>

0800039e <LoopForever>:

LoopForever:
  b LoopForever
 800039e:	e7fe      	b.n	800039e <LoopForever>
  ldr   r0, =_estack
 80003a0:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80003a4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80003a8:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80003ac:	08000424 	.word	0x08000424
  ldr r2, =_sbss
 80003b0:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80003b4:	2000001c 	.word	0x2000001c

080003b8 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80003b8:	e7fe      	b.n	80003b8 <ADC_IRQHandler>
	...

080003bc <__libc_init_array>:
 80003bc:	b570      	push	{r4, r5, r6, lr}
 80003be:	4d0d      	ldr	r5, [pc, #52]	@ (80003f4 <__libc_init_array+0x38>)
 80003c0:	4c0d      	ldr	r4, [pc, #52]	@ (80003f8 <__libc_init_array+0x3c>)
 80003c2:	1b64      	subs	r4, r4, r5
 80003c4:	10a4      	asrs	r4, r4, #2
 80003c6:	2600      	movs	r6, #0
 80003c8:	42a6      	cmp	r6, r4
 80003ca:	d109      	bne.n	80003e0 <__libc_init_array+0x24>
 80003cc:	4d0b      	ldr	r5, [pc, #44]	@ (80003fc <__libc_init_array+0x40>)
 80003ce:	4c0c      	ldr	r4, [pc, #48]	@ (8000400 <__libc_init_array+0x44>)
 80003d0:	f000 f818 	bl	8000404 <_init>
 80003d4:	1b64      	subs	r4, r4, r5
 80003d6:	10a4      	asrs	r4, r4, #2
 80003d8:	2600      	movs	r6, #0
 80003da:	42a6      	cmp	r6, r4
 80003dc:	d105      	bne.n	80003ea <__libc_init_array+0x2e>
 80003de:	bd70      	pop	{r4, r5, r6, pc}
 80003e0:	f855 3b04 	ldr.w	r3, [r5], #4
 80003e4:	4798      	blx	r3
 80003e6:	3601      	adds	r6, #1
 80003e8:	e7ee      	b.n	80003c8 <__libc_init_array+0xc>
 80003ea:	f855 3b04 	ldr.w	r3, [r5], #4
 80003ee:	4798      	blx	r3
 80003f0:	3601      	adds	r6, #1
 80003f2:	e7f2      	b.n	80003da <__libc_init_array+0x1e>
 80003f4:	0800041c 	.word	0x0800041c
 80003f8:	0800041c 	.word	0x0800041c
 80003fc:	0800041c 	.word	0x0800041c
 8000400:	08000420 	.word	0x08000420

08000404 <_init>:
 8000404:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000406:	bf00      	nop
 8000408:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800040a:	bc08      	pop	{r3}
 800040c:	469e      	mov	lr, r3
 800040e:	4770      	bx	lr

08000410 <_fini>:
 8000410:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000412:	bf00      	nop
 8000414:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000416:	bc08      	pop	{r3}
 8000418:	469e      	mov	lr, r3
 800041a:	4770      	bx	lr
